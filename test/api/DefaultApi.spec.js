/**
 * ap-challenge-microservice
 * Services that provide access and interaction with all sorts of challenges, including design, dev, single round matches, and marathon matches. 
 *
 * OpenAPI spec version: 1.0.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApChallengeMicroservice);
  }
}(this, function(expect, ApChallengeMicroservice) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApChallengeMicroservice.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('activateChallenge', function() {
      it('should call activateChallenge successfully', function(done) {
        //uncomment below and update the code to test activateChallenge
        //instance.activateChallenge(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelPrivateContest', function() {
      it('should call cancelPrivateContest successfully', function(done) {
        //uncomment below and update the code to test cancelPrivateContest
        //instance.cancelPrivateContest(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('challengeResultsGet', function() {
      it('should call challengeResultsGet successfully', function(done) {
        //uncomment below and update the code to test challengeResultsGet
        //instance.challengeResultsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('challengesGet', function() {
      it('should call challengesGet successfully', function(done) {
        //uncomment below and update the code to test challengesGet
        //instance.challengesGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('challengesIdGet', function() {
      it('should call challengesIdGet successfully', function(done) {
        //uncomment below and update the code to test challengesIdGet
        //instance.challengesIdGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('challengesIdPut', function() {
      it('should call challengesIdPut successfully', function(done) {
        //uncomment below and update the code to test challengesIdPut
        //instance.challengesIdPut(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('challengesIdResourcesDelete', function() {
      it('should call challengesIdResourcesDelete successfully', function(done) {
        //uncomment below and update the code to test challengesIdResourcesDelete
        //instance.challengesIdResourcesDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('challengesIdResourcesGet', function() {
      it('should call challengesIdResourcesGet successfully', function(done) {
        //uncomment below and update the code to test challengesIdResourcesGet
        //instance.challengesIdResourcesGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('challengesIdResourcesPost', function() {
      it('should call challengesIdResourcesPost successfully', function(done) {
        //uncomment below and update the code to test challengesIdResourcesPost
        //instance.challengesIdResourcesPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('closePrivateContest', function() {
      it('should call closePrivateContest successfully', function(done) {
        //uncomment below and update the code to test closePrivateContest
        //instance.closePrivateContest(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('directChallengesGet', function() {
      it('should call directChallengesGet successfully', function(done) {
        //uncomment below and update the code to test directChallengesGet
        //instance.directChallengesGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChallengeTypes', function() {
      it('should call getChallengeTypes successfully', function(done) {
        //uncomment below and update the code to test getChallengeTypes
        //instance.getChallengeTypes(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('marathonMatcheResultsGet', function() {
      it('should call marathonMatcheResultsGet successfully', function(done) {
        //uncomment below and update the code to test marathonMatcheResultsGet
        //instance.marathonMatcheResultsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('marathonMatchesGet', function() {
      it('should call marathonMatchesGet successfully', function(done) {
        //uncomment below and update the code to test marathonMatchesGet
        //instance.marathonMatchesGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('membersHandleChallengesGet', function() {
      it('should call membersHandleChallengesGet successfully', function(done) {
        //uncomment below and update the code to test membersHandleChallengesGet
        //instance.membersHandleChallengesGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('membersHandleMmsGet', function() {
      it('should call membersHandleMmsGet successfully', function(done) {
        //uncomment below and update the code to test membersHandleMmsGet
        //instance.membersHandleMmsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('membersHandleSrmsGet', function() {
      it('should call membersHandleSrmsGet successfully', function(done) {
        //uncomment below and update the code to test membersHandleSrmsGet
        //instance.membersHandleSrmsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('phasesGet', function() {
      it('should call phasesGet successfully', function(done) {
        //uncomment below and update the code to test phasesGet
        //instance.phasesGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('platformsGet', function() {
      it('should call platformsGet successfully', function(done) {
        //uncomment below and update the code to test platformsGet
        //instance.platformsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('platformsIdDelete', function() {
      it('should call platformsIdDelete successfully', function(done) {
        //uncomment below and update the code to test platformsIdDelete
        //instance.platformsIdDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('platformsIdPatch', function() {
      it('should call platformsIdPatch successfully', function(done) {
        //uncomment below and update the code to test platformsIdPatch
        //instance.platformsIdPatch(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('platformsPost', function() {
      it('should call platformsPost successfully', function(done) {
        //uncomment below and update the code to test platformsPost
        //instance.platformsPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerChallenge', function() {
      it('should call registerChallenge successfully', function(done) {
        //uncomment below and update the code to test registerChallenge
        //instance.registerChallenge(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveDraftContest', function() {
      it('should call saveDraftContest successfully', function(done) {
        //uncomment below and update the code to test saveDraftContest
        //instance.saveDraftContest(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('srmResultsGet', function() {
      it('should call srmResultsGet successfully', function(done) {
        //uncomment below and update the code to test srmResultsGet
        //instance.srmResultsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('srmsGet', function() {
      it('should call srmsGet successfully', function(done) {
        //uncomment below and update the code to test srmsGet
        //instance.srmsGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('technologiesGet', function() {
      it('should call technologiesGet successfully', function(done) {
        //uncomment below and update the code to test technologiesGet
        //instance.technologiesGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('technologiesIdDelete', function() {
      it('should call technologiesIdDelete successfully', function(done) {
        //uncomment below and update the code to test technologiesIdDelete
        //instance.technologiesIdDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('technologiesIdPatch', function() {
      it('should call technologiesIdPatch successfully', function(done) {
        //uncomment below and update the code to test technologiesIdPatch
        //instance.technologiesIdPatch(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('technologiesPost', function() {
      it('should call technologiesPost successfully', function(done) {
        //uncomment below and update the code to test technologiesPost
        //instance.technologiesPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unregisterChallenge', function() {
      it('should call unregisterChallenge successfully', function(done) {
        //uncomment below and update the code to test unregisterChallenge
        //instance.unregisterChallenge(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
