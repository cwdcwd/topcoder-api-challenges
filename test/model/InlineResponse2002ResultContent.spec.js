/**
 * ap-challenge-microservice
 * Services that provide access and interaction with all sorts of challenges, including design, dev, single round matches, and marathon matches. 
 *
 * OpenAPI spec version: 1.0.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApChallengeMicroservice);
  }
}(this, function(expect, ApChallengeMicroservice) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApChallengeMicroservice.InlineResponse2002ResultContent();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InlineResponse2002ResultContent', function() {
    it('should create an instance of InlineResponse2002ResultContent', function() {
      // uncomment below and update the code to test InlineResponse2002ResultContent
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be.a(ApChallengeMicroservice.InlineResponse2002ResultContent);
    });

    it('should have the property challengeType (base name: "challengeType")', function() {
      // uncomment below and update the code to test the property challengeType
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property challengeName (base name: "challengeName")', function() {
      // uncomment below and update the code to test the property challengeName
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property challengeId (base name: "challengeId")', function() {
      // uncomment below and update the code to test the property challengeId
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property projectId (base name: "projectId")', function() {
      // uncomment below and update the code to test the property projectId
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property forumId (base name: "forumId")', function() {
      // uncomment below and update the code to test the property forumId
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property introduction (base name: "introduction")', function() {
      // uncomment below and update the code to test the property introduction
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property round1Introduction (base name: "round1Introduction")', function() {
      // uncomment below and update the code to test the property round1Introduction
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property round2Introduction (base name: "round2Introduction")', function() {
      // uncomment below and update the code to test the property round2Introduction
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property detailedRequirements (base name: "detailedRequirements")', function() {
      // uncomment below and update the code to test the property detailedRequirements
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property finalSubmissionGuidelines (base name: "finalSubmissionGuidelines")', function() {
      // uncomment below and update the code to test the property finalSubmissionGuidelines
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property screeningScorecardId (base name: "screeningScorecardId")', function() {
      // uncomment below and update the code to test the property screeningScorecardId
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property reviewScorecardId (base name: "reviewScorecardId")', function() {
      // uncomment below and update the code to test the property reviewScorecardId
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property cmcTaskId (base name: "cmcTaskId")', function() {
      // uncomment below and update the code to test the property cmcTaskId
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property numberOfCheckpointsPrizes (base name: "numberOfCheckpointsPrizes")', function() {
      // uncomment below and update the code to test the property numberOfCheckpointsPrizes
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property topCheckPointPrize (base name: "topCheckPointPrize")', function() {
      // uncomment below and update the code to test the property topCheckPointPrize
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property postingDate (base name: "postingDate")', function() {
      // uncomment below and update the code to test the property postingDate
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property registrationEndDate (base name: "registrationEndDate")', function() {
      // uncomment below and update the code to test the property registrationEndDate
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property checkpointSubmissionEndDate (base name: "checkpointSubmissionEndDate")', function() {
      // uncomment below and update the code to test the property checkpointSubmissionEndDate
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property submissionEndDate (base name: "submissionEndDate")', function() {
      // uncomment below and update the code to test the property submissionEndDate
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property submissionsViewable (base name: "submissionsViewable")', function() {
      // uncomment below and update the code to test the property submissionsViewable
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property reviewType (base name: "reviewType")', function() {
      // uncomment below and update the code to test the property reviewType
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property allowStockArt (base name: "allowStockArt")', function() {
      // uncomment below and update the code to test the property allowStockArt
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property filetypes (base name: "filetypes")', function() {
      // uncomment below and update the code to test the property filetypes
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property forumLink (base name: "forumLink")', function() {
      // uncomment below and update the code to test the property forumLink
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property appealsEndDate (base name: "appealsEndDate")', function() {
      // uncomment below and update the code to test the property appealsEndDate
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property finalFixEndDate (base name: "finalFixEndDate")', function() {
      // uncomment below and update the code to test the property finalFixEndDate
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property submissionLimit (base name: "submissionLimit")', function() {
      // uncomment below and update the code to test the property submissionLimit
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property currentStatus (base name: "currentStatus")', function() {
      // uncomment below and update the code to test the property currentStatus
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property digitalRunPoints (base name: "digitalRunPoints")', function() {
      // uncomment below and update the code to test the property digitalRunPoints
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property reliabilityBonus (base name: "reliabilityBonus")', function() {
      // uncomment below and update the code to test the property reliabilityBonus
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property challengeCommunity (base name: "challengeCommunity")', function() {
      // uncomment below and update the code to test the property challengeCommunity
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property directUrl (base name: "directUrl")', function() {
      // uncomment below and update the code to test the property directUrl
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property technology (base name: "technology")', function() {
      // uncomment below and update the code to test the property technology
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property prize (base name: "prize")', function() {
      // uncomment below and update the code to test the property prize
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property winners (base name: "winners")', function() {
      // uncomment below and update the code to test the property winners
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property currentPhaseName (base name: "currentPhaseName")', function() {
      // uncomment below and update the code to test the property currentPhaseName
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property currentPhaseRemainingTime (base name: "currentPhaseRemainingTime")', function() {
      // uncomment below and update the code to test the property currentPhaseRemainingTime
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property currentPhaseEndDate (base name: "currentPhaseEndDate")', function() {
      // uncomment below and update the code to test the property currentPhaseEndDate
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property document (base name: "Document")', function() {
      // uncomment below and update the code to test the property document
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property platforms (base name: "platforms")', function() {
      // uncomment below and update the code to test the property platforms
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property event (base name: "event")', function() {
      // uncomment below and update the code to test the property event
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

    it('should have the property copilotDetailedRequirements (base name: "copilotDetailedRequirements")', function() {
      // uncomment below and update the code to test the property copilotDetailedRequirements
      //var instane = new ApChallengeMicroservice.InlineResponse2002ResultContent();
      //expect(instance).to.be();
    });

  });

}));
