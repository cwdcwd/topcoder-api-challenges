/**
 * ap-challenge-microservice
 * Services that provide access and interaction with all sorts of challenges, including design, dev, single round matches, and marathon matches. 
 *
 * OpenAPI spec version: 1.0.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApChallengeMicroservice);
  }
}(this, function(expect, ApChallengeMicroservice) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApChallengeMicroservice.ChallengeUpdate();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ChallengeUpdate', function() {
    it('should create an instance of ChallengeUpdate', function() {
      // uncomment below and update the code to test ChallengeUpdate
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be.a(ApChallengeMicroservice.ChallengeUpdate);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property confidentialityType (base name: "confidentialityType")', function() {
      // uncomment below and update the code to test the property confidentialityType
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property technologies (base name: "technologies")', function() {
      // uncomment below and update the code to test the property technologies
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property subTrack (base name: "subTrack")', function() {
      // uncomment below and update the code to test the property subTrack
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property reviewType (base name: "reviewType")', function() {
      // uncomment below and update the code to test the property reviewType
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property billingAccountId (base name: "billingAccountId")', function() {
      // uncomment below and update the code to test the property billingAccountId
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property milestoneId (base name: "milestoneId")', function() {
      // uncomment below and update the code to test the property milestoneId
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property detailedRequirements (base name: "detailedRequirements")', function() {
      // uncomment below and update the code to test the property detailedRequirements
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property submissionGuidelines (base name: "submissionGuidelines")', function() {
      // uncomment below and update the code to test the property submissionGuidelines
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property registrationStartsAt (base name: "registrationStartsAt")', function() {
      // uncomment below and update the code to test the property registrationStartsAt
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property registrationEndsAt (base name: "registrationEndsAt")', function() {
      // uncomment below and update the code to test the property registrationEndsAt
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property checkpointSubmissionStartsAt (base name: "checkpointSubmissionStartsAt")', function() {
      // uncomment below and update the code to test the property checkpointSubmissionStartsAt
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property checkpointSubmissionEndsAt (base name: "checkpointSubmissionEndsAt")', function() {
      // uncomment below and update the code to test the property checkpointSubmissionEndsAt
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property submissionEndsAt (base name: "submissionEndsAt")', function() {
      // uncomment below and update the code to test the property submissionEndsAt
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property round1Info (base name: "round1Info")', function() {
      // uncomment below and update the code to test the property round1Info
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property round2Info (base name: "round2Info")', function() {
      // uncomment below and update the code to test the property round2Info
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property platforms (base name: "platforms")', function() {
      // uncomment below and update the code to test the property platforms
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property numberOfCheckpointPrizes (base name: "numberOfCheckpointPrizes")', function() {
      // uncomment below and update the code to test the property numberOfCheckpointPrizes
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property checkpointPrize (base name: "checkpointPrize")', function() {
      // uncomment below and update the code to test the property checkpointPrize
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property finalDeliverableTypes (base name: "finalDeliverableTypes")', function() {
      // uncomment below and update the code to test the property finalDeliverableTypes
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property prizes (base name: "prizes")', function() {
      // uncomment below and update the code to test the property prizes
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property projectId (base name: "projectId")', function() {
      // uncomment below and update the code to test the property projectId
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property submissionVisibility (base name: "submissionVisibility")', function() {
      // uncomment below and update the code to test the property submissionVisibility
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property maxNumOfSubmissions (base name: "maxNumOfSubmissions")', function() {
      // uncomment below and update the code to test the property maxNumOfSubmissions
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property task (base name: "task")', function() {
      // uncomment below and update the code to test the property task
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property assignees (base name: "assignees")', function() {
      // uncomment below and update the code to test the property assignees
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property copilotId (base name: "copilotId")', function() {
      // uncomment below and update the code to test the property copilotId
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property copilotFee (base name: "copilotFee")', function() {
      // uncomment below and update the code to test the property copilotFee
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

    it('should have the property failedRegisterUsers (base name: "failedRegisterUsers")', function() {
      // uncomment below and update the code to test the property failedRegisterUsers
      //var instane = new ApChallengeMicroservice.ChallengeUpdate();
      //expect(instance).to.be();
    });

  });

}));
